package gengo

var GenerateTemplate = `// Code generated by protoc-gen-gopb. DO NOT EDIT.
{{ call .VersionInfo}}

package {{.Package}}

$Import-Packages$

{{ range .Enums }} {{$EnumType := .TypeName }}
{{ .LeadingComments }} type {{.TypeName}} int32

const ( {{ range $i,$item := .Values }}
	{{ $item.LeadingComments}}{{ $item.ValueName }} {{ $EnumType}} = {{ $item.Num }} {{ $item.TrailingComment }} {{ end }}
)

// Enum value maps for {{.TypeName}}.
var (
	{{.GoName}}_name = map[int32]string{ {{range $i,$item := .Values }}
		{{ $item.Duplicate }} {{ $item.Num }}: "{{ $item.Desc  }}", {{ end }}
	}
	{{.GoName}}_value = map[string]int32{ {{range $i,$item := .Values }}
		"{{ $item.Desc  }}": {{ $item.Num }}, {{ end }}
	}
)

func (x {{ .TypeName }}) Enum() *{{ .TypeName }} {
	p := new({{ .TypeName }})
	*p = x
	return p
}

func (x {{ .TypeName }}) String() string {
	if name, ok := {{ .GoName }}_name[int32(x)]; ok {
		return name
	}
	return strconv.FormatInt(int64(x), 10)
}

{{ end }}

{{ range .Messages }} {{ $msg := .}}

{{ .LeadingComments }} type {{.TypeName}} struct { {{ range $i,$field := .Fields }} {{ $tag:= $field.AddTag "json" ""}} {{ $tag:= $field.AddTag "db" ""}}
	{{ $field.LeadingComments }} {{ $field.GoName }} {{ $field.TypeName }} {{ $field.Tags }} {{ $field.TrailingComment }} {{ end }}
}
func (x *{{.TypeName}}) Reset() {
	*x = {{.TypeName}}{}
}


{{ if .GenGetter }} {{ range $i,$field := .Fields }}
{{ $field.LeadingComments }} func (x *{{ .TypeName }}) Get{{ $field.GoName}}() {{$field.TypeName}} {
	{{ if $field.GetNilCheck }} if x != nil {{ else }} if x != nil && x.{{ $field.GoName }} != nil {{end}} {
		return x.{{ $field.GoName }}
	}
	return x.{{ $field.GoName }}
}
{{ end }}{{ end }}


// MarshalObject marshal data to []byte
func (x *{{ .TypeName }}) MarshalObject() (data []byte, err error) {
	data = make([]byte, 0, x.MarshalSize())
	return x.MarshalObjectTo(data)
}

// MarshalSize calc marshal data need space
func (x *{{ .TypeName }}) MarshalSize() (size int) {  {{ range $i,$field := .Fields }} {{ $vname := ValueName "x." $field.GoName }}
	if {{ call $field.CheckNotEmpty $vname }} {
		{{GenTemplate $field.TemplateSize $field "Size" "size" "VName" $vname}}
	}{{ end }}
	return
}


// MarshalObjectTo marshal data to []byte
func (x *{{ .TypeName }}) MarshalObjectTo(buf []byte) (data []byte, err error) {	
	data = buf  {{ range $i,$field := .Fields }} {{ $vname := ValueName "x." $field.GoName }}
	if {{ call $field.CheckNotEmpty $vname }} {
		{{GenTemplate $field.TemplateEncode $field "Buffer" "data" "VName" $vname}}
	}{{ end }}
	return
}


// UnmarshalObject unmarshal data from []byte
func (x *{{ .TypeName }}) UnmarshalObject(data []byte) (err error) {	
	index := 0
	for index < len(data) {
		num, typ, cnt := protowire.ConsumeTag(data[index:])
		if num == 0 {
			err = errors.New("invalid tag")
			return
		}

		index += cnt
		switch num { {{ range $i,$field := .Fields }} {{ $vname := ValueName "x." $field.GoName }}
		case {{$field.DescNum}}:
			{{GenTemplate $field.TemplateDecode $field "Buffer" "data[index:]" "VName" $vname "Index" "index"}} {{end}}
		default: // skip fields
			cnt = protowire.ConsumeFieldValue(num, typ, data[index:])
			if cnt < 0 {
				return protowire.ParseError(cnt)
			}
			index += cnt
		}
	}

	return
}

{{ range $i, $tpl := .CustomTemplates }}
	{{GenCustomTemplate $tpl $msg }}
{{ end }}

{{ end }}

`
